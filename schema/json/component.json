{
  "title": "Component protocol",
  "description": "Protocol for handling the component registry.",
  "output": {
    "error": {
      "id": "output/error",
      "description": "Component error",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "error"
              ]
            }
          }
        }
      ]
    },
    "component": {
      "id": "output/component",
      "description": "Transmit the metadata about a component instance.",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "component"
              ]
            },
            "payload": {
              "required": [
                "name",
                "subgraph",
                "inPorts",
                "outPorts"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "component name in format that can be used in graphs"
                },
                "description": {
                  "type": "string",
                  "description": "(optional) textual description on what the component does"
                },
                "icon": {
                  "type": "string",
                  "description": "(optional): visual icon for the component, matching icon names in [Font Awesome](http://fortawesome.github.io/Font-Awesome/icons/)"
                },
                "subgraph": {
                  "type": "boolean",
                  "description": "boolean telling whether the component is a subgraph"
                },
                "inPorts": {
                  "description": "list of input ports, each containing:",
                  "$ref": "/shared/port_definition"
                },
                "outPorts": {
                  "description": "list of output ports",
                  "$ref": "/shared/port_definition"
                }
              }
            }
          }
        }
      ]
    },
    "source": {
      "id": "output/source",
      "description": "Source code for a component. In cases where a runtime receives a `source` message, it should do whatever operations are needed for making that component available for graphs, including possible compilation.",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "source"
              ]
            },
            "payload": {
              "required": [
                "name",
                "language",
                "code"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the component"
                },
                "language": {
                  "type": "string",
                  "description": "The programming language used for the component code, for example `coffeescript`"
                },
                "library": {
                  "type": "string",
                  "description": "(optional) Component library identifier"
                },
                "code": {
                  "type": "string",
                  "description": "Component source code"
                },
                "tests": {
                  "type": "string",
                  "description": "(optional) unit tests for the component"
                }
              }
            }
          }
        }
      ]
    }
  },
  "input": {
    "error": {
      "id": "input/error",
      "description": "Component error",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "error"
              ]
            }
          }
        }
      ]
    },
    "list": {
      "id": "input/list",
      "description": "Request a list of currently available components. Will be responded with a set of `component` messages.",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "list"
              ]
            },
            "payload": {
              "properties": {
                "secret": {
                  "type": "string",
                  "description": "access token to authorize user"
                }
              }
            }
          }
        }
      ]
    },
    "getsource": {
      "id": "input/getsource",
      "description": "Request for the source code of a given component. Will be responded with a `source` message.",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "getsource"
              ]
            },
            "payload": {
              "required": [
                "name"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the component to for which to get source code"
                },
                "secret": {
                  "type": "string",
                  "description": "access token to authorize user"
                }
              }
            }
          }
        }
      ]
    },
    "source": {
      "id": "input/source",
      "description": "Source code for a component. In cases where a runtime receives a `source` message, it should do whatever operations are needed for making that component available for graphs, including possible compilation.",
      "allOf": [
        {
          "$ref": "/shared/message"
        },
        {
          "properties": {
            "protocol": {
              "enum": [
                "component"
              ]
            },
            "command": {
              "enum": [
                "source"
              ]
            },
            "payload": {
              "required": [
                "name",
                "language",
                "code"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the component"
                },
                "language": {
                  "type": "string",
                  "description": "The programming language used for the component code, for example `coffeescript`"
                },
                "library": {
                  "type": "string",
                  "description": "(optional) Component library identifier"
                },
                "code": {
                  "type": "string",
                  "description": "Component source code"
                },
                "tests": {
                  "type": "string",
                  "description": "(optional) unit tests for the component"
                },
                "secret": {
                  "type": "string",
                  "description": "access token to authorize user"
                }
              }
            }
          }
        }
      ]
    }
  }
}