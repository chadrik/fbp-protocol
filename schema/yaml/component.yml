title: Component protocol
description: Protocol for handling the component registry.

output:
  error:
    id: 'output/error'
    description: 'Error response to a command on component protocol'
    allOf:
      - $ref: '#/shared/output_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['error']
          payload:
            required: ['message']
            properties:
              message:
                type: 'string'
                description: 'Error message describing what went wrong'

  component:
    id: 'output/component'
    description: Transmit the metadata about a component instance.
    allOf:
      - $ref: '#/shared/output_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['component']
          payload:
            required: ['name', 'subgraph', 'inPorts', 'outPorts']
            additionalProperties: false
            properties:
              name:
                type: string
                description:  'component name in format that can be used in graphs. Should contain the component library prefix.'
                example: 'my-project/MyComponent'
              description:
                type: string
                description: 'textual description on what the component does'
              icon:
                type: string
                description: >-
                  Visual icon for the component, matching icon
                  names in <a href="http://fortawesome.github.io/Font-Awesome/icons/">Font Awesome</a>
              subgraph:
                type: boolean
                description: 'boolean telling whether the component is a subgraph'
              inPorts:
                description: 'list of input ports of the component'
                $ref: '#/shared/port_definition'
              outPorts:
                description: 'list of output ports of the component'
                $ref: '#/shared/port_definition'
  componentsready:
    id: 'output/componentsready'
    description: Indication that a component listing has finished
    additionalProperties: false
    required: ['protocol', 'command', 'payload']
    properties:
      protocol:
        enum: ['component']
        type: string
        description: 'type of protocol'
      command:
        enum: ['componentsready']
        description: 'command to be executed'
        example: 'addnode'
      payload:
        type: 'integer'
        description: 'number of components transmitted in this batch'
        example: 42
      responseTo:
        type: string
        description: unique identifier of the request message is response to

  source:
    id: 'output/source'
    description: >-
      Source code for a component. In cases where a runtime receives a `source`
      message, it should do whatever operations are needed for making that
      component available for graphs, including possible compilation.
    allOf:
      - $ref: '#/shared/output_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['source']
          payload:
            required: ['name', 'language', 'code']
            additionalProperties: false
            properties:
              name:
                type: string
                description: 'Name of the component. Must not contain library prefix'
                example: 'MyComponent'
              language:
                type: string
                description: >-
                  The programming language used for the component code
                example: 'c++'
              library:
                type: string
                description: 'Component library identifier'
                example: 'components-common'
              code:
                type: string
                description: 'Component source code'
              tests:
                type: string
                description: 'unit tests for the component'

input:

  list:
    id: 'input/list'
    description: >-
      Request a list of currently available components. Will be responded with
      a set of `component` messages.
    allOf:
      - $ref: '#/shared/input_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['list']
          payload:
            required: []

  getsource:
    id: 'input/getsource'
    description: >-
      Request for the source code of a given component. Will be responded with
      a `source` message.
    allOf:
      - $ref: '#/shared/input_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['getsource']
          payload:
            required: ['name']
            additionalProperties: false
            properties:
              name:
                type: string
                description: 'Name of the component to for which to get source code. Should contain the library prefix'
                example: 'my-project/SomeComponent'

  source:
    id: 'input/source'
    description: >-
      Source code for a component. In cases where a runtime receives a `source`
      message, it should do whatever operations are needed for making that
      component available for graphs, including possible compilation.
    allOf:
      - $ref: '#/shared/input_message'
      - properties:
          protocol:
            enum: ['component']
          command:
            enum: ['source']
          payload:
            required: ['name', 'language', 'code']
            additionalProperties: false
            properties:
              name:
                type: string
                description: 'Name of the component. Must not contain library prefix.'
                example: 'SomeComponent'
              language:
                type: string
                description: >-
                  The programming language used for the component code
                example: c++
              library:
                type: string
                description: 'Component library identifier'
                example: 'my-project'
              code:
                type: string
                description: 'Component source code'
              tests:
                type: string
                description: 'Unit tests for the component'
